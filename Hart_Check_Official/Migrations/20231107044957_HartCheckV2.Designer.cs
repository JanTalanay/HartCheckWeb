// <auto-generated />
using System;
using Hart_Check_Official.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hart_Check_Official.Migrations
{
    [DbContext(typeof(datacontext))]
    [Migration("20231107044957_HartCheckV2")]
    partial class HartCheckV2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hart_Check_Official.Models.Admin", b =>
                {
                    b.Property<int>("adminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("adminID"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("adminID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.ArchievedRecord", b =>
                {
                    b.Property<int>("archivedRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("archivedRecordID"), 1L, 1);

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<double>("diastolic")
                        .HasColumnType("float");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.Property<double>("systolic")
                        .HasColumnType("float");

                    b.HasKey("archivedRecordID");

                    b.HasIndex("patientID");

                    b.ToTable("ArchievedRecord");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.AuditLog", b =>
                {
                    b.Property<int>("auditLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("auditLogID"), 1L, 1);

                    b.Property<DateTime?>("eventTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("eventType")
                        .HasColumnType("int");

                    b.Property<int>("referenceID")
                        .HasColumnType("int");

                    b.Property<string>("tableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("auditLogID");

                    b.HasIndex("userID");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.AuditLogValue", b =>
                {
                    b.Property<int>("auditLogID")
                        .HasColumnType("int");

                    b.Property<string>("columnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("auditLogID");

                    b.ToTable("AuditLogValue");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BloodPressure", b =>
                {
                    b.Property<int>("bloodPressureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bloodPressureID"), 1L, 1);

                    b.Property<DateTime?>("dateTaken")
                        .HasColumnType("datetime2");

                    b.Property<double>("diastolic")
                        .HasColumnType("float");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.Property<double>("systolic")
                        .HasColumnType("float");

                    b.HasKey("bloodPressureID");

                    b.HasIndex("patientID");

                    b.ToTable("BloodPressure");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BloodPressureThreshold", b =>
                {
                    b.Property<int>("thresholdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("thresholdID"), 1L, 1);

                    b.Property<double>("diastolicLevel")
                        .HasColumnType("float");

                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.Property<double>("systolicLevel")
                        .HasColumnType("float");

                    b.HasKey("thresholdID");

                    b.HasIndex("doctorID")
                        .IsUnique();

                    b.HasIndex("patientID")
                        .IsUnique();

                    b.ToTable("BloodPressureThreshold");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BMIType", b =>
                {
                    b.Property<int>("BMITypeID")
                        .HasColumnType("int");

                    b.Property<string>("BMI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BMITypeID");

                    b.ToTable("BMIType");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BodyMass", b =>
                {
                    b.Property<int>("bodyMassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bodyMassID"), 1L, 1);

                    b.Property<int>("BMITypeID")
                        .HasColumnType("int");

                    b.Property<int>("height")
                        .HasColumnType("int");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.Property<int>("weight")
                        .HasColumnType("int");

                    b.HasKey("bodyMassID");

                    b.HasIndex("patientID");

                    b.ToTable("BodyMass");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BugReport", b =>
                {
                    b.Property<int>("bugID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bugID"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("featureID")
                        .HasColumnType("int");

                    b.Property<int>("usersID")
                        .HasColumnType("int");

                    b.HasKey("bugID");

                    b.HasIndex("usersID");

                    b.ToTable("BugReport");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Chat", b =>
                {
                    b.Property<int>("chatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("chatID"), 1L, 1);

                    b.Property<int>("consultationID")
                        .HasColumnType("int");

                    b.HasKey("chatID");

                    b.HasIndex("consultationID")
                        .IsUnique();

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Clinic", b =>
                {
                    b.Property<int>("clinicID")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clinicID");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Condition", b =>
                {
                    b.Property<int>("conditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("conditionID"), 1L, 1);

                    b.Property<string>("condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("consultationID")
                        .HasColumnType("int");

                    b.HasKey("conditionID");

                    b.HasIndex("consultationID");

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Consultation", b =>
                {
                    b.Property<int>("consultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("consultationID"), 1L, 1);

                    b.Property<int>("doctorSchedID")
                        .HasColumnType("int");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.HasKey("consultationID");

                    b.HasIndex("patientID");

                    b.ToTable("Consultation");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Diagnosis", b =>
                {
                    b.Property<int>("diagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("diagnosisID"), 1L, 1);

                    b.Property<int>("consultationID")
                        .HasColumnType("int");

                    b.Property<string>("diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("diagnosisID");

                    b.HasIndex("consultationID");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.DoctorLicense", b =>
                {
                    b.Property<int>("licenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("licenseID"), 1L, 1);

                    b.Property<string>("externalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("licenseID");

                    b.ToTable("DoctorLicense");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.DoctorSchedule", b =>
                {
                    b.Property<int>("doctorSchedID")
                        .HasColumnType("int");

                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("schedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("doctorSchedID");

                    b.HasIndex("doctorID");

                    b.ToTable("DoctorSchedule");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.EducationalResource", b =>
                {
                    b.Property<int>("resourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("resourceID"), 1L, 1);

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("resourceID");

                    b.ToTable("EducationalResource");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.HealthCareClinic", b =>
                {
                    b.Property<int>("healthCareClinicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("healthCareClinicID"), 1L, 1);

                    b.Property<int>("clinicID")
                        .HasColumnType("int");

                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.HasKey("healthCareClinicID");

                    b.HasIndex("doctorID");

                    b.ToTable("HealthCareClinic");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.HealthCareProfessional", b =>
                {
                    b.Property<int>("doctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("doctorID"), 1L, 1);

                    b.Property<string>("clinic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("licenseID")
                        .HasColumnType("int");

                    b.Property<int>("usersID")
                        .HasColumnType("int");

                    b.Property<int?>("verification")
                        .HasColumnType("int");

                    b.HasKey("doctorID");

                    b.HasIndex("licenseID")
                        .IsUnique()
                        .HasFilter("[licenseID] IS NOT NULL");

                    b.HasIndex("usersID");

                    b.ToTable("HealthCareProfessional");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.MedicalCondition", b =>
                {
                    b.Property<int>("medCondID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("medCondID"), 1L, 1);

                    b.Property<string>("conditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("medicalCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.HasKey("medCondID");

                    b.HasIndex("patientID");

                    b.ToTable("MedicalCondition");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.MedicalHistory", b =>
                {
                    b.Property<int>("medicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("medicalHistoryID"), 1L, 1);

                    b.Property<string>("medicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pastSurgicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.HasKey("medicalHistoryID");

                    b.HasIndex("patientID");

                    b.ToTable("MedicalHistory");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Medicine", b =>
                {
                    b.Property<int>("medicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("medicineID"), 1L, 1);

                    b.Property<int>("consultationID")
                        .HasColumnType("int");

                    b.Property<string>("medicine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("medicineID");

                    b.HasIndex("consultationID");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Messages", b =>
                {
                    b.Property<int>("messagesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("messagesID"), 1L, 1);

                    b.Property<int>("chatID")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("recieverID")
                        .HasColumnType("int");

                    b.Property<int>("senderID")
                        .HasColumnType("int");

                    b.HasKey("messagesID");

                    b.HasIndex("chatID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Patients", b =>
                {
                    b.Property<int>("patientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientID"), 1L, 1);

                    b.Property<int>("usersID")
                        .HasColumnType("int");

                    b.HasKey("patientID");

                    b.HasIndex("usersID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.PatientsDoctor", b =>
                {
                    b.Property<int>("patientDoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientDoctorID"), 1L, 1);

                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.HasKey("patientDoctorID");

                    b.HasIndex("doctorID");

                    b.HasIndex("patientID")
                        .IsUnique();

                    b.ToTable("PatientsDoctor");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.PreviousMedication", b =>
                {
                    b.Property<int>("prevMedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("prevMedID"), 1L, 1);

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.Property<string>("previousMed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("prevMedID");

                    b.HasIndex("patientID");

                    b.ToTable("PreviousMedication");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Users", b =>
                {
                    b.Property<int>("usersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("usersID"), 1L, 1);

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("phoneNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("usersID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrdinalPriority")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.ArchievedRecord", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Patients", "patients")
                        .WithMany("archievedrecord")
                        .HasForeignKey("patientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.AuditLog", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Users", "users")
                        .WithMany("auditlog")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.AuditLogValue", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.AuditLog", "auditlog")
                        .WithMany("auditlogsvalue")
                        .HasForeignKey("auditLogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("auditlog");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BloodPressure", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Patients", "patients")
                        .WithMany("BloodPressure")
                        .HasForeignKey("patientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BloodPressureThreshold", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.HealthCareProfessional", "doctor")
                        .WithOne("BloodPressureThreshold")
                        .HasForeignKey("Hart_Check_Official.Models.BloodPressureThreshold", "doctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hart_Check_Official.Models.Patients", "patients")
                        .WithOne("BloodPressureThreshold")
                        .HasForeignKey("Hart_Check_Official.Models.BloodPressureThreshold", "patientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BMIType", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.BodyMass", "BodyMass")
                        .WithOne("BMIType")
                        .HasForeignKey("Hart_Check_Official.Models.BMIType", "BMITypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyMass");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BodyMass", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Patients", "patient")
                        .WithMany("BodyMass")
                        .HasForeignKey("patientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BugReport", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Users", "User")
                        .WithMany("bugreport")
                        .HasForeignKey("usersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Chat", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Consultation", "consultations")
                        .WithOne("chat")
                        .HasForeignKey("Hart_Check_Official.Models.Chat", "consultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("consultations");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Clinic", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.HealthCareClinic", "HealthcareClinic")
                        .WithMany("clinic")
                        .HasForeignKey("clinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthcareClinic");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Condition", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Consultation", "consultation")
                        .WithMany("conditions")
                        .HasForeignKey("consultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("consultation");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Consultation", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Patients", "patients")
                        .WithMany("Consultation")
                        .HasForeignKey("patientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Diagnosis", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Consultation", "consultation")
                        .WithMany("diagnoses")
                        .HasForeignKey("consultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("consultation");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.DoctorSchedule", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.HealthCareProfessional", "doctor")
                        .WithMany("DoctorSchedule")
                        .HasForeignKey("doctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hart_Check_Official.Models.Consultation", "consultation")
                        .WithMany("doctorsched")
                        .HasForeignKey("doctorSchedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("consultation");

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.HealthCareClinic", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.HealthCareProfessional", "doctor")
                        .WithMany("HealthcareClinic")
                        .HasForeignKey("doctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.HealthCareProfessional", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.DoctorLicense", "Doctorlicense")
                        .WithOne("doctor")
                        .HasForeignKey("Hart_Check_Official.Models.HealthCareProfessional", "licenseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hart_Check_Official.Models.Users", "User")
                        .WithMany("doctor")
                        .HasForeignKey("usersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctorlicense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.MedicalCondition", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Patients", "patients")
                        .WithMany("MedicalConditions")
                        .HasForeignKey("patientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.MedicalHistory", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Patients", "patients")
                        .WithMany("MedicalHistory")
                        .HasForeignKey("patientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Medicine", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Consultation", "consultation")
                        .WithMany("medicines")
                        .HasForeignKey("consultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("consultation");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Messages", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Chat", "chat")
                        .WithMany("messages")
                        .HasForeignKey("chatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chat");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Patients", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Users", "User")
                        .WithMany("patients")
                        .HasForeignKey("usersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.PatientsDoctor", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.HealthCareProfessional", "doctor")
                        .WithMany("patientDoctor")
                        .HasForeignKey("doctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hart_Check_Official.Models.Patients", "patient")
                        .WithOne("patientDoctor")
                        .HasForeignKey("Hart_Check_Official.Models.PatientsDoctor", "patientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.PreviousMedication", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Patients", "patients")
                        .WithMany("PreviousMedication")
                        .HasForeignKey("patientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Resource", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Group", "Group")
                        .WithMany("Resources")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Resources_Groups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.WorkOrder", b =>
                {
                    b.HasOne("Hart_Check_Official.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_WorkOrders_Resources");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.AuditLog", b =>
                {
                    b.Navigation("auditlogsvalue");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.BodyMass", b =>
                {
                    b.Navigation("BMIType")
                        .IsRequired();
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Chat", b =>
                {
                    b.Navigation("messages");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Consultation", b =>
                {
                    b.Navigation("chat")
                        .IsRequired();

                    b.Navigation("conditions");

                    b.Navigation("diagnoses");

                    b.Navigation("doctorsched");

                    b.Navigation("medicines");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.DoctorLicense", b =>
                {
                    b.Navigation("doctor")
                        .IsRequired();
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Group", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.HealthCareClinic", b =>
                {
                    b.Navigation("clinic");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.HealthCareProfessional", b =>
                {
                    b.Navigation("BloodPressureThreshold")
                        .IsRequired();

                    b.Navigation("DoctorSchedule");

                    b.Navigation("HealthcareClinic");

                    b.Navigation("patientDoctor");
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Patients", b =>
                {
                    b.Navigation("BloodPressure");

                    b.Navigation("BloodPressureThreshold")
                        .IsRequired();

                    b.Navigation("BodyMass");

                    b.Navigation("Consultation");

                    b.Navigation("MedicalConditions");

                    b.Navigation("MedicalHistory");

                    b.Navigation("PreviousMedication");

                    b.Navigation("archievedrecord");

                    b.Navigation("patientDoctor")
                        .IsRequired();
                });

            modelBuilder.Entity("Hart_Check_Official.Models.Users", b =>
                {
                    b.Navigation("auditlog");

                    b.Navigation("bugreport");

                    b.Navigation("doctor");

                    b.Navigation("patients");
                });
#pragma warning restore 612, 618
        }
    }
}
